#pragma once

#include <vulkan/vulkan.h>

#define VK_ERROR_STRING(x) case (int)x: return #x;

#define VK_CHECK(x) { \
VkResult ret = x; \
if(ret != VK_SUCCESS) QB_LOG_WARN("VkResult: %s is %s in %s at line %d\n", #x, VulkanErrorToString(x), __FILE__, __LINE__); \
}

#define VK_VALIDATE(x, msg) { \
if(!(x)) QB_LOG_WARN("VK: %s - %s\n", msg, #x); \
}

#ifndef NDEBUG
inline constexpr int VALIDATION_LAYER_COUNT = 1;
inline constexpr const char* VALIDATION_LAYERS[VALIDATION_LAYER_COUNT]{
	"VK_LAYER_KHRONOS_validation"
};
#else
inline constexpr int VALIDATION_LAYER_COUNT = 0;
inline constexpr const char* const* VALIDATION_LAYERS = nullptr;
#endif

// Add debug messenger callback extension for validation layer if in debug mode
#ifndef NDEBUG
inline constexpr int INSTANCE_EXT_COUNT = 3;
inline constexpr const char* INSTANCE_EXT_NAMES[INSTANCE_EXT_COUNT]{
	VK_KHR_SURFACE_EXTENSION_NAME,
	VK_KHR_WIN32_SURFACE_EXTENSION_NAME,
	VK_EXT_DEBUG_UTILS_EXTENSION_NAME,
};
#else
inline constexpr int INSTANCE_EXT_COUNT = 2;
inline constexpr const char* INSTANCE_EXT_NAMES[INSTANCE_EXT_COUNT]{
	VK_KHR_SURFACE_EXTENSION_NAME,
	VK_KHR_WIN32_SURFACE_EXTENSION_NAME
};
#endif

inline constexpr int DEVICE_EXT_COUNT = 1;
inline constexpr const char* DEVICE_EXT_NAMES[DEVICE_EXT_COUNT]{
	VK_KHR_SWAPCHAIN_EXTENSION_NAME
};

inline constexpr const char* VulkanErrorToString(VkResult vkResult) {
	switch (vkResult) {
		VK_ERROR_STRING(VK_SUCCESS);
		VK_ERROR_STRING(VK_NOT_READY);
		VK_ERROR_STRING(VK_TIMEOUT);
		VK_ERROR_STRING(VK_EVENT_SET);
		VK_ERROR_STRING(VK_EVENT_RESET);
		VK_ERROR_STRING(VK_INCOMPLETE);
		VK_ERROR_STRING(VK_ERROR_OUT_OF_HOST_MEMORY);
		VK_ERROR_STRING(VK_ERROR_OUT_OF_DEVICE_MEMORY);
		VK_ERROR_STRING(VK_ERROR_INITIALIZATION_FAILED);
		VK_ERROR_STRING(VK_ERROR_DEVICE_LOST);
		VK_ERROR_STRING(VK_ERROR_MEMORY_MAP_FAILED);
		VK_ERROR_STRING(VK_ERROR_LAYER_NOT_PRESENT);
		VK_ERROR_STRING(VK_ERROR_EXTENSION_NOT_PRESENT);
		VK_ERROR_STRING(VK_ERROR_FEATURE_NOT_PRESENT);
		VK_ERROR_STRING(VK_ERROR_INCOMPATIBLE_DRIVER);
		VK_ERROR_STRING(VK_ERROR_TOO_MANY_OBJECTS);
		VK_ERROR_STRING(VK_ERROR_FORMAT_NOT_SUPPORTED);
		VK_ERROR_STRING(VK_ERROR_SURFACE_LOST_KHR);
		VK_ERROR_STRING(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
		VK_ERROR_STRING(VK_SUBOPTIMAL_KHR);
		VK_ERROR_STRING(VK_ERROR_OUT_OF_DATE_KHR);
		VK_ERROR_STRING(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
		VK_ERROR_STRING(VK_ERROR_VALIDATION_FAILED_EXT);
		VK_ERROR_STRING(VK_ERROR_INVALID_SHADER_NV);
		VK_ERROR_STRING(VK_RESULT_BEGIN_RANGE);
		VK_ERROR_STRING(VK_RESULT_RANGE_SIZE);
	default: return "UNKNOWN";
	}
}